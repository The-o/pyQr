#!/usr/bin/python3

import wx
import wx.adv
import qrcode
import sys
import pyperclip

from io import BytesIO
from typing import List
from base64 import b64decode
from wx.lib.newevent import NewEvent
from pyzbar import pyzbar

def makeScreenshot() -> wx.Bitmap:
    screen = wx.ScreenDC()
    size = screen.GetSize()
    width = size.width
    height = size.height

    bmp = wx.Bitmap(width, height)
    mem = wx.MemoryDC(bmp)
    mem.Blit(0, 0, width, height, screen, 0, 0)
    mem.SelectObject(wx.NullBitmap)
    screen.Blit(0, 0, width, height, screen, 0, 0, wx.OR)

    return bmp

def bmpToY800Pixels(bmp: wx.Bitmap) -> bytes:
    pixels = bmp.ConvertToImage().GetData()

    width = bmp.GetWidth()
    height = bmp.GetHeight()

    buf = bytearray()
    for i in range(0, width * height):
        r,g,b = pixels[3 * i: 3*i + 3]
        clr = (r + g + b) //3
        buf.append(clr)

    return bytes(buf)

def makeQrCode(text: str) -> wx.Bitmap:
    img = qrcode.make(
        text,
        error_correction=qrcode.constants.ERROR_CORRECT_L,
    ).convert('RGB')
    width, height = img.size
    width, height = width // 3, height // 3
    img = img.resize((width, height))
    return wx.Bitmap.FromBuffer(width, height, img.tobytes())

class QrData:
    def __init__(self, text: str, x: int = 0, y: int = 0, *, width: int = 0, height: int = 0, screenshot: wx.Bitmap = None, bmp: wx.Bitmap = None):
        if screenshot != None:
            bmp = screenshot.GetSubBitmap(wx.Rect(x, y, width, height))
            self.__init__(text, x, y, bmp = bmp)
        else:
            self.rect = wx.Rect(x, y, bmp.GetWidth(), bmp.GetHeight())
            self.text = text
            self.bmp = bmp

def scanScreenshot(bmp:wx.Bitmap) -> List[QrData]:
    pixelData = bmpToY800Pixels(bmp)
    symbols = pyzbar.decode((pixelData, bmp.GetWidth(), bmp.GetHeight()))

    result = []
    for symbol in symbols:
        rect = symbol.rect
        text = symbol.data.decode('utf-8')
        result.append(QrData(text, x = rect.left, y = rect.top, width = rect.width, height = rect.height, screenshot = bmp))

    return result

class QrPanel(wx.Control):
    ClickEvent, EVT_CLICK = NewEvent()

    def __init__(self, parent: wx.Frame, qr: QrData):
        super().__init__(parent, wx.ID_ANY, pos=qr.rect.Position, size=qr.rect.Size, style=wx.BORDER_NONE)
        self._bmp = qr.bmp
        self._text = qr.text

        self.SetPosition(qr.rect.Position)
        self.SetMaxSize(qr.rect.Size)
        self.SetSize(qr.rect.Size)
        self.SetToolTip(wx.ToolTip(qr.text))
        self.Bind(wx.EVT_PAINT, self._onPaint)
        self.Bind(wx.EVT_LEFT_DOWN, self._onClick)

    def _onPaint(self, event):
        dc = wx.PaintDC(self)
        dc.DrawBitmap(self._bmp, 0, 0)

    def _onClick(self, event):
        self.QueueEvent(QrPanel.ClickEvent(text = self._text))

class QrScanWindow(wx.Frame):
    GotTextEvent, EVT_GOT_TEXT = NewEvent()

    #----------------------------------------------------------------------
    def __init__(self, bmp: wx.Bitmap, qrs: List[QrData]):
        super().__init__(None, wx.ID_ANY, '', size=bmp.GetSize(), pos=(0,0), style=wx.STAY_ON_TOP|wx.FRAME_NO_TASKBAR|wx.BORDER_NONE)

        self._bmp = bmp.ConvertToImage().ConvertToDisabled(0).ConvertToBitmap()
        self.Bind(wx.EVT_CLOSE, self._onClose)
        # self.Bind(wx.EVT_PAINT, self._onPaint)
        self.Bind(wx.EVT_ACTIVATE, self._onActivate)
        self.Show()

        self._mainPanel = wx.Panel(self, size=bmp.GetSize(), pos=(0,0), style=wx.STAY_ON_TOP|wx.BORDER_NONE)
        self._mainPanel.Bind(wx.EVT_LEFT_DOWN, self._onClick)
        self._mainPanel.Bind(wx.EVT_PAINT, self._onPanelPaint)

        self._qrPanels = []
        for qr in qrs:
            qrPanel = QrPanel(self._mainPanel, qr)
            qrPanel.Bind(QrPanel.EVT_CLICK, self._onQrClick)
            self._qrPanels.append(qrPanel)

    def _onClick(self, event:wx.CommandEvent):
        self.Close()

    def _onActivate(self, event: wx.ShowEvent):
        self._setPosAndSize()

    def _onPanelPaint(self, event):
        dc = wx.PaintDC(self._mainPanel)
        dc.DrawBitmap(self._bmp, 0, 0)

    def _onQrClick(self, event):
        self.QueueEvent(QrScanWindow.GotTextEvent(text = event.text))
        self.Close()

    def _onClose(self):
        for qrPanel in self._qrPanels:
            qrPanel.Destroy()
        self._mainPanel.Destroy()

    def _setPosAndSize(self):
        self.SetPosition((0,0))
        self.SetClientSize(self._bmp.GetSize())


class QrPopup(wx.Dialog):
    def __init__(self, text: str):
        super().__init__(None, style=wx.STAY_ON_TOP|wx.FRAME_NO_TASKBAR)

        self._panel = QrPanel(self, QrData(text, 0, 0, bmp=makeQrCode(text)))

        self._panel.Bind(QrPanel.EVT_CLICK, self._onClick)
        self.SetClientSize(self._panel.GetSize())
        self.Center()
        self.Show()

    def _onClick(self, event):
        self.Close()

class QrTaskBarIcon(wx.adv.TaskBarIcon):
    ExitEvent, EVT_EXIT = NewEvent()
    ScanQREvent, EVT_SCAN_QR = NewEvent()
    GenQREvent, EVT_GEN_QR = NewEvent()

    TrayTooltip = 'pyQr'
    TrayIconBmp = wx.Image(BytesIO(b64decode(
        '''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
        f//Z'''
    )))

    def __init__(self):
        super().__init__()

        self._setIcon(QrTaskBarIcon.TrayIconBmp)
        self.Bind(wx.adv.EVT_TASKBAR_LEFT_DOWN, self._onMenuScanQR)

    def CreatePopupMenu(self):
        menu = wx.Menu()
        self._createMenuItem(menu, 'Сканировать QR', self._onMenuScanQR)
        self._createMenuItem(menu, 'Сгенерировать QR', self._onMenuGenQR)
        menu.AppendSeparator()
        self._createMenuItem(menu, 'Выход', self._onMenuExit)
        return menu

    def _createMenuItem(self, menu: wx.Menu, label:str, func):
        item = wx.MenuItem(menu, -1, label)
        menu.Bind(wx.EVT_MENU, func, id=item.GetId())
        menu.Append(item)

    def _setIcon(self, icon: wx.Image):
        icon = wx.Icon(icon.ConvertToBitmap())
        self.SetIcon(icon, QrTaskBarIcon.TrayTooltip)

    def _onMenuExit(self, event: wx.CommandEvent):
        self.QueueEvent(QrTaskBarIcon.ExitEvent())

    def _onMenuScanQR(self, event: wx.CommandEvent):
        self.QueueEvent(QrTaskBarIcon.ScanQREvent())

    def _onMenuGenQR(self, event: wx.CommandEvent):
        self.QueueEvent(QrTaskBarIcon.GenQREvent())

class PyQrApp(wx.App):

    NO_TRAY_MESSAGE = \
'''К сожалению, в вашем окружении отсутствует системный трей
Пожалуйста, воспользуйтесь командами:
* pyQr gen  - для генерирования QR-кода
* pyQr scan - для сканирования QR-кодов
Эти команды можно добавить в ярлыки на панели быстрого запуска
'''

    def __init__(self, cmd):
        self._cmd = cmd
        self._taskBarIcon = None
        self.quickClose = False
        super().__init__()


    def OnInit(self):
        if self._cmd == 'gen':
            self._doGenQR()
        elif self._cmd == 'scan':
            self.quickClose = True
            self._doScanQR()
        else:
            self._doRun()

        return True

    def _showMessage(self, message, flags = wx.ICON_WARNING):
        if self._taskBarIcon == None or not self._taskBarIcon.ShowBalloon('pyQr', message, flags = flags):
            wx.adv.NotificationMessage('pyQr', parent=None, message = message, flags = flags).Show()

    def _doRun(self):
        if not QrTaskBarIcon.IsAvailable():
            self._showMessage(PyQrApp.NO_TRAY_MESSAGE, wx.ICON_ERROR)
            return

        self._mainWindow = wx.Frame(None, wx.ID_ANY, '', size=(1,1), pos=(0,0), style=wx.STAY_ON_TOP|wx.FRAME_NO_TASKBAR|wx.BORDER_NONE)
        self._taskBarIcon = QrTaskBarIcon()
        self._taskBarIcon.Bind(QrTaskBarIcon.EVT_EXIT, self._onExit)
        self._taskBarIcon.Bind(QrTaskBarIcon.EVT_GEN_QR, self._onGenQR)
        self._taskBarIcon.Bind(QrTaskBarIcon.EVT_SCAN_QR, self._onScanQR)

    def _onGenQR(self, event):
        self._doGenQR()

    def _onScanQR(self, event):
        self._doScanQR()

    def _onExit(self, event):
        self._mainWindow.Close()
        self._mainWindow.Destroy()
        self._taskBarIcon.Destroy()

    def _copyFromClipboard1(self) -> str:
        data = wx.TextDataObject()
        if wx.TheClipboard.Open():
            wx.TheClipboard.GetData(data)
            wx.TheClipboard.Close()
            return data.text
        else:
            return ''

    def _copyToClipboard1(self, text: str) -> bool:
        if wx.TheClipboard.Open():
            wx.TheClipboard.SetData(wx.TextDataObject(text))
            wx.TheClipboard.Close()
            return True
        else:
            return False

    def _copyFromClipboard(self) -> str:
        return pyperclip.paste()

    def _copyToClipboard(self, text: str) -> bool:
        return pyperclip.copy(text)

    # ---------------------------------- Generate QR ---------------------------------------
    def _doGenQR(self):
        text = self._copyFromClipboard()
        if text == '':
            self._showMessage('В буфере обмена пусто')
            return False

        if len(text.encode('utf-8')) > 2953:
            self._showMessage('Превышен максимальный размер текста в 2953 байт')
            return False

        self._qrPopup = QrPopup(text)
        self._qrPopup.Bind(wx.EVT_CLOSE, self._onQrPopupClose)

        return True

    def _onQrPopupClose(self, event):
        self._hideQRPopup()

    def _hideQRPopup(self):
        self._qrPopup.Destroy()
        self._qrPopup = None
    # --------------------------------- /Generate QR ---------------------------------------

    # ------------------------------------ Scan QR -----------------------------------------
    def _doScanQR(self) -> None:
        bmp = makeScreenshot()
        qrs = scanScreenshot(bmp)

        if len(qrs) == 0:
            self._showMessage('QR-коды на экране не найдены', wx.ICON_INFORMATION)
            return

        self._scanWindow = QrScanWindow(bmp, qrs)
        self._scanWindow.Bind(QrScanWindow.EVT_GOT_TEXT, self._onGotText)
        self._scanWindow.Bind(wx.EVT_CLOSE, self._onScanWindowClose)

    def _onScanWindowClose(self, event):
        self._scanWindow.Destroy()
        self._scanWindow = None

    def _onGotText(self, event):
        self._doGotText(event.text)

    def _doGotText(self, text:str):
        self._copyToClipboard(text)
    # ----------------------------------- /Scan QR -----------------------------------------

if __name__ == '__main__':
    cmd = '' if len(sys.argv) == 1 else sys.argv[1]
    if cmd in ('', 'scan', 'gen'):
        PyQrApp(cmd).MainLoop()
    else:
        print(
'''
Usage: pyQr [command]

Commands:
    scan - scan display for QR codes and copy selected's text to clipboard
    gen - generate QR-code from clipboard text
    help - print this message

Runs system tray-icon application if no command is specified
'''
)
